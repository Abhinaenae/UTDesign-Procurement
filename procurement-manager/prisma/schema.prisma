// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userID           Int       @id @default(autoincrement())
  netID            String // parsed from email in our API
  firstName        String
  lastName         String
  email            String
  active           Boolean
  responsibilities String?
  deactivationDate DateTime?
  // RELATIONSHIPS HERE ::
  role             Role      @relation(fields: [roleID], references: [roleID])
  roleID           Int // relationship with ROLES
  Request          Request[]
  mentorProcess    Process[] @relation("Mentor")
  adminProcess     Process[] @relation("Admin")
}

model Role {
  roleID Int    @id @default(autoincrement())
  role   String
  User   User[]
}

model Project {
  projectID        Int       @id @default(autoincrement())
  projectType      String
  projectNum       Int
  projectTitle     String
  startingBudget   Decimal
  sponsorCompany   String
  activationDate   DateTime
  deactivationDate DateTime
  additionalInfo   String?
  costCenter       Int?
  // RELATIONSHIPS HERE ::
  Request          Request[]
}

model PreviousRecord {
  recordID Int @id @default(autoincrement())
  // projectID relationship with PROJECTS
  // roleID relationship with ROLES
  // userID relationship with USERS
}

// ----------EVERYTHING WITHIN PROCUREMENT FORM----------------//
// A Request is a procurement form sent by students
model Request {
  requestID Int @id @default(autoincrement())

  dateNeeded     DateTime
  dateSubmitted  DateTime
  dateOrdered    DateTime
  DateReceved    DateTime
  dateApproved   DateTime
  justification  String? // reason why it item is included
  additionalInfo String?
  status         String?
  // RELATIONSHIPS HERE ::
  project        Project  @relation(fields: [projectID], references: [projectID])
  projectID      Int

  student   User @relation(fields: [studentID], references: [userID])
  studentID Int

  vendor         Vendor @relation(fields: [vendorVendorID], references: [vendorID])
  vendorID       Int
  vendorVendorID Int
}

// A RequestItem is each item field that is being requested to order by students
model RequestItem {
  itemID Int @id @default(autoincrement())

  description String
  url         String
  partNumber  String
  quantity    Int
  unitPrice   Decimal?
  vendorID    Int?
  uploadID    Int?
  // RELATIONSHIPS HERE ::
}

// An Order happens after Request has been processed (approved and verified by mentor and admin) and admin "orders" the items
model Order {
  orderID Int @id @default(autoincrement())

  dateOrdered  DateTime
  orderNumber  String
  orderDetails String
  trackingInfo String
  shippingCost Decimal
  // RELATIONSHIPS HERE ::
}

model OtherExpense {
  expenseID Int @id @default(autoincrement())

  expenseType     String
  expenseComments String?
  expenseAmount   Decimal
  expenseDate     DateTime
  // RELATIONSHIPS HERE ::
  // with projects
  // with request 
}

model RequestUpload {
  uploadID       Int     @id @default(autoincrement())
  attachmentPath String?
  attachmentName String?
  // RELATIONSHIPS HERE ::
}

// ------------------------------------------------------------//

// ----------EVERYTHING WITHIN REIMBURSEMENT FORM----------------//
model Reimbursement {
  reimbursementID Int      @id @default(autoincrement())
  dateSubmitted   DateTime
  status          String
  justification   String?
  additionalInfo  String?
  // RELATIONSHIPS HERE ::
}

model ReimbursementItem {
  itemID Int @id @default(autoincrement())
  // RELATIONSHIPS HERE ::
}

model ReimbursementUpload {
  uploadID       Int    @id @default(autoincrement())
  attachmentPath String
  attachmentName String
  // RELATIONSHIPS HERE ::
}

// --------------------------------------------------------------//
enum Status {
  UNDER_REVIEW
  APPROVED
  REJECTED
}

model Process {
  processID               Int       @id @default(autoincrement())
  mentor                  User?     @relation("Mentor", fields: [mentorID], references: [userID])
  mentorID                Int?
  mentorProcessed         DateTime?
  mentorProcessedComments String?
  admin                   User?     @relation("Admin", fields: [adminID], references: [userID])
  adminID                 Int?
  adminProcessed          DateTime?
  adminProcessedComments  String?
  status                  Status    @default(UNDER_REVIEW)
  // RELATIONSHIPS HERE ::
}

model Department {
  departmentID Int    @id @default(autoincrement())
  department   String
}

model Vendor {
  vendorID   Int       @id @default(autoincrement())
  vendorName String
  Request    Request[]
}
